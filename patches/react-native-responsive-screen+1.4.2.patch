diff --git a/node_modules/react-native-responsive-screen/index.d.ts b/node_modules/react-native-responsive-screen/index.d.ts
index 6ee16ff..9c4c631 100644
--- a/node_modules/react-native-responsive-screen/index.d.ts
+++ b/node_modules/react-native-responsive-screen/index.d.ts
@@ -3,6 +3,6 @@ declare module 'react-native-responsive-screen' {
 
   export function widthPercentageToDP(widthPercent: string | number): number;
   export function heightPercentageToDP(heightPercent: string | number): number;
-  export function listenOrientationChange(screenClassComponent: Component<any, any>): void;
+  export function listenOrientationChange(screenClassComponent: Component<any, any> | Function): void;
   export function removeOrientationListener(): void;
 }
diff --git a/node_modules/react-native-responsive-screen/index.js b/node_modules/react-native-responsive-screen/index.js
index f620420..1f57a78 100644
--- a/node_modules/react-native-responsive-screen/index.js
+++ b/node_modules/react-native-responsive-screen/index.js
@@ -1,5 +1,5 @@
 // packages
-import { Dimensions, PixelRatio } from 'react-native';
+import {Dimensions, PixelRatio, EmitterSubscription} from 'react-native';
 
 // Retrieve initial screen's width
 let screenWidth = Dimensions.get('window').width;
@@ -7,6 +7,8 @@ let screenWidth = Dimensions.get('window').width;
 // Retrieve initial screen's height
 let screenHeight = Dimensions.get('window').height;
 
+let dimensionsList;
+
 /**
  * Converts provided width percentage to independent pixel (dp).
  * @param  {string} widthPercent The percentage of screen's width that UI element should cover
@@ -15,11 +17,12 @@ let screenHeight = Dimensions.get('window').height;
  */
 const widthPercentageToDP = widthPercent => {
   // Parse string percentage input and convert it to number.
-  const elemWidth = typeof widthPercent === "number" ? widthPercent : parseFloat(widthPercent);
+  const elemWidth =
+    typeof widthPercent === 'number' ? widthPercent : parseFloat(widthPercent);
 
   // Use PixelRatio.roundToNearestPixel method in order to round the layout
   // size (dp) to the nearest one that correspons to an integer number of pixels.
-  return PixelRatio.roundToNearestPixel(screenWidth * elemWidth / 100);
+  return PixelRatio.roundToNearestPixel((screenWidth * elemWidth) / 100);
 };
 
 /**
@@ -30,11 +33,14 @@ const widthPercentageToDP = widthPercent => {
  */
 const heightPercentageToDP = heightPercent => {
   // Parse string percentage input and convert it to number.
-  const elemHeight = typeof heightPercent === "number" ? heightPercent : parseFloat(heightPercent);
+  const elemHeight =
+    typeof heightPercent === 'number'
+      ? heightPercent
+      : parseFloat(heightPercent);
 
   // Use PixelRatio.roundToNearestPixel method in order to round the layout
   // size (dp) to the nearest one that correspons to an integer number of pixels.
-  return PixelRatio.roundToNearestPixel(screenHeight * elemHeight / 100);
+  return PixelRatio.roundToNearestPixel((screenHeight * elemHeight) / 100);
 };
 
 /**
@@ -47,15 +53,19 @@ const heightPercentageToDP = heightPercent => {
  *                      invoke setState method and trigger screen rerender (this.setState()).
  */
 const listenOrientationChange = that => {
-  Dimensions.addEventListener('change', newDimensions => {
+  dimensionsList = Dimensions.addEventListener('change', newDimensions => {
     // Retrieve and save new dimensions
     screenWidth = newDimensions.window.width;
     screenHeight = newDimensions.window.height;
 
     // Trigger screen's rerender with a state update of the orientation variable
-    that.setState({
-      orientation: screenWidth < screenHeight ? 'portrait' : 'landscape'
-    });
+    if (that?.setState == null) {
+      that(screenWidth < screenHeight ? 'portrait' : 'landscape');
+    } else {
+      that.setState({
+        orientation: screenWidth < screenHeight ? 'portrait' : 'landscape',
+      });
+    }
   });
 };
 
@@ -66,12 +76,14 @@ const listenOrientationChange = that => {
  * avoid adding new listeners every time the same component is re-mounted.
  */
 const removeOrientationListener = () => {
-  Dimensions.removeEventListener('change', () => {});
+  if (dimensionsList) {
+    dimensionsList.remove();
+  }
 };
 
 export {
   widthPercentageToDP,
   heightPercentageToDP,
   listenOrientationChange,
-  removeOrientationListener
+  removeOrientationListener,
 };
